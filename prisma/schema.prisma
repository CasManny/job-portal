datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Company Company?
  JobSeeker JobSeeker?
  stripeCustomerId String? @unique

  userType UserType? 

  onBoardingCompleted Boolean @default(false)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  JOB_SEEKER
  COMPANY
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Company {
  id String @id @default(uuid())
  name String 
  location String 
  about String
  logo String
  website String
  xAccount String?
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  JobPost JobPost[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model JobSeeker {
  id String @id @default(uuid())
  name String
  about String
  resume String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id String @id @default(uuid())

  jobTitle String
  employmentType String
  location String
  salaryFrom Int
  salaryTo Int
  jobDescription String
  listingDuration Int
  benefits String[]
  status JobPostStatus @default(DRAFT)

  Company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}


 
